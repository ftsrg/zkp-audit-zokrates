/*
 * Copyright 2023 Contributors the the zkp-audit-zokrates repository
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you
 * may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
 * implied.  See the License for the specific language governing
 * permissions and limitations under the License.
 */

/**
 * Schema of the main input data received by the generators: the
 * simplified ledger data.
 */
export interface Input {
  /** The initial balances of the participating accounts */
  balances: Balances
  /** The contents of the blocks */
  blocks: Block[]
  /** The contents of the whitelist */
  whitelist: Whitelist
}

/**
 * A key-value mapping that describes the initial balance of every
 * account.
 *
 * @remarks
 * Accounts are represented by simple numbers.  It is the job of the
 * generators/transformers to convert these into actual addresses.
 */
export interface Balances { [key: Account]: number }

/**
 * A block: simply a list of transactions.
 *
 * @remarks
 * Other data, such as the hash of the previous blockâ€™s header is
 * generated by the generators/transformers elsewhere.
 */
export type Block = Transaction[]

/**
 * Transactions are (from, to, amount) triples.
 *
 * @remarks
 * Accounts are represented by simple numbers.  It is the job of the
 * generators/transformers to convert these into actual addresses.
 */
export interface Transaction {
  /** Where funds were sent from. */
  source: Account
  /** Where funds were sent to. */
  destination: Account
  /** The amount of funds transferred. */
  amount: number
}

/**
 * Whitelist: a simple list of accounts.
 *
 * @remarks
 * Accounts are represented by simple numbers.  It is the job of the
 * generators/transformers to convert these into actual addresses.
 */
export type Whitelist = Account[]

/**
 * Accounts, represented by simple numbers.
 */
export type Account = number

/**
 * Pretty-format a transaction.
 *
 * @param tx - The transaction to format
 * @returns A pretty stringified version of `tx`
 */
export function prettyFormat (tx: Transaction): string {
  return `${tx.source} --[${tx.amount}]--> ${tx.destination}`
}
