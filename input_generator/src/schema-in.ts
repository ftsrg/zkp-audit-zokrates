/**
 * Schema of the main input data received by the generators: the
 * simplified ledger data.
 */
export interface Input {
  /** The initial balances of the participating accounts */
  balances: Balances
  /** The contents of the blocks */
  blocks: Block[]
  /** The contents of the whitelist */
  whitelist: Whitelist
}

/**
 * A key-value mapping that describes the initial balance of every
 * account.
 *
 * Accounts are represented by simple numbers.  It is the job of the
 * generators/transformers to convert these into actual addresses.
 */
export interface Balances { [key: Account]: number }

/**
 * A block: simply a list of transactions.
 *
 * Other data, such as the hash of the previous blockâ€™s header is
 * generated by the generators/transformers elsewhere.
 */
export type Block = Transaction[]

/**
 * Transactions are (from, to, amount) triples.
 *
 * Accounts are represented by simple numbers.  It is the job of the
 * generators/transformers to convert these into actual addresses.
 */
export interface Transaction {
  source: Account
  destination: Account
  amount: number
}

/**
 * Whitelist: a simple list of accounts.
 *
 * Accounts are represented by simple numbers.  It is the job of the
 * generators/transformers to convert these into actual addresses.
 */
export type Whitelist = Account[]

/**
 * Accounts, represented by simple numbers.
 */
export type Account = number

/**
 * Pretty-format a transaction.
 */
export function prettyFormat (tx: Transaction): string {
  return `${tx.source} --[${tx.amount}]--> ${tx.destination}`
}
